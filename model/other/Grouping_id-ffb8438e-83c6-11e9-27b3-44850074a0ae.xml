<archimate:Grouping
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Business Process Layer"
    id="id-ffb8438e-83c6-11e9-27b3-44850074a0ae"
    documentation="== Context and Typical Flow&#xD;&#xA;&#xD;&#xA;With the advent of SOA came the promise of agility and flexibility. An organization that has embarked on the journey of SOA would be successful in delivering the promise of agility and flexibility only when its business processes and associated flows are realized in the architecture in a fashion that allow rapid changes in the implementation of these business processes. In the past, business process flows were typically embedded in software components and user interfaces. The SOA Reference Architecture (SOA RA) recognizes the promise of SOA and the challenges in the past in the ability to change the business processes as market changes and therefore introduces a specific layer for business processes and flows. The layer is called the Business Process Layer and allows externalization of the business process flow in a separate layer in the architecture and thus has a better chance to rapidly change as the market condition changes.&#xD;&#xA;&#xD;&#xA;.Illustration&#xD;&#xA;image::http://www.opengroup.org/soa/source-book/soa_refarch/i21-0.gif[]&#xD;&#xA;&#xD;&#xA;The Business Process Layer covers process representation and composition, and provides building blocks for aggregating loosely-coupled services as a sequencing process aligned with business goals. Data flow and control flow are used to enable interactions between services and business processes. The interaction may exist within an enterprise or across multiple enterprises.&#xD;&#xA;&#xD;&#xA;This layer includes information exchange flow between participants (individual users and business entities), resources, and processes in a variety of forms to achieve the business goal. Most of the exchanged information may also include non-structured and non-transactional messages. The business logic is used to form service flow as parallel tasks or sequential tasks based on business rules, policies, and other business requirements.&#xD;&#xA;&#xD;&#xA;Business processes represent the backbone of the flow of a business. The dynamic side of business architecture is realized through business processes. These business processes used to be implemented through a combination of static applications or, at best, a hardwired workflow. With service-orientation, a process can be realized by service compositions (which may be interim as an orchestration or a choreography) and the ability to insert “human intervention” and support long-running transactions.&#xD;&#xA;&#xD;&#xA;In particular, compositions of services exposed in the Services Layer are defined in this layer: atomic services are composed into a set of composite services using a service composition engine. Note that composition can be implemented as a choreography of services or an orchestration of the underlying service elements.&#xD;&#xA;&#xD;&#xA;Services combined or composed into flows or, for example, choreographies of services, bundled into a flow, work together to establish an application. These applications support specific use-cases and business processes. Typically, a visual flow composition tool will be used to design the application flow. Services Orchestration shows how a Business Process “P” can be implemented using Services A, B, C, and D from the Services Layer. Process P contains the logic for the sequence in which the services need to be invoked and executed, as well as having responsibility for many of the non-functional aspects such as state management. The services that are aggregated into a business process can be sourced from individual services or composite services.&#xD;&#xA;&#xD;&#xA;== Value Proposition&#xD;&#xA;&#xD;&#xA;Building process blocks on-demand with reduced cost allows the supporting technology changes from being high volume/transactional to sophisticated but much smaller footprint applications. In fact, a business process captures the activities needed to accomplish a certain business goal. In today’s business solutions, a business process has played a central role in bridging the gap between business and IT.&#xD;&#xA;&#xD;&#xA;From the top-down approach, a business process can be defined by business people based on customers’ requirements. In order to optimize the business process for better IT implementation, a business process should be componentized as re-usable services that can be modeled, analyzed, and optimized based on business requirements such as Quality of Service (QoS) (historical data described in the Quality of Service Layer), flow preference, price, time of delivery, and customer preferences. From the bottom-up approach, after a set of assets is created, they could be leveraged in a meaningful business context to satisfy customer requirements. The flexibility and extensibility of services composition guided by business requirements and composition rules enable business process on-demand for addressing different types of customer pinpoints by re-using services assets.&#xD;&#xA;&#xD;&#xA;From an interaction perspective, the Business Process Layer communicates with the Consumer Layer (aka presentation layer) to communicate inputs and results with role players (e.g., end user, decision-makers, system administrator, etc.) through web portal or Business-to-Business (B2B) programs. Most of the control flow messages and data flow messages of the business process may be routed and transformed through the Integration Layer. The contents of the messages could be defined by the Information Layer. The Key Performance Indicators (KPIs) for each task or process could be defined in the Quality of Service Layer. The aggregation of services could be guided by the Governance Layer.&#xD;&#xA;&#xD;&#xA;All the services should be represented and described by the Services Layer; and Service Components are represented by the Service Component Layer. From a technical perspective, dynamic and automatic business process composition poses critical challenges to researchers and practitioners in the field of web services. First, business processes are driven by business requirements, which typically tend to be informal, subjective, and difficult to quantify. Therefore, it is critical to properly formulate the descriptive and subjective requirements into quantifiable, objective, and machine-readable formats in order to enable automatic business process composition.&#xD;&#xA;&#xD;&#xA;Second, existing web services-based business process description languages do not adequately accommodate detailed requirement specification, which fact makes it difficult to create optimal business process compositions.&#xD;&#xA;&#xD;&#xA;Third, present web services specifications generally lack a facility to define comprehensive relationships among business entities, business services, and operations. These relationships may be important to optimize business process composition. For example, suppose enterprise E1 needs to compose a business process including service S. Enterprises E2 and E3 both provide similar service S.&#xD;&#xA;&#xD;&#xA;However, there is a partnership between E1 and E2 that leads to a discount on services, and there is no partnership relationship between E1 and E3. If price is a requirement for party E1, this partnership between E1 and E2 needs to be taken into consideration in order to form the most appropriate business process. Fourth, nowadays more and more web services are published to the Internet on the daily basis. How to clearly specify search requirements to discover the most appropriate web services candidates remains a challenge. Fifth, a typical business process generally requires multiple web services to collaborate in order to serve business requirements.&#xD;&#xA;&#xD;&#xA;Therefore, each Service Component not only needs to satisfy individual requirements, but also needs to coexist with other Service Components in order to best fit the overall composed business process. In other words, the entire business process needs to be optimized prior to execution.&#xD;&#xA;&#xD;&#xA;In summary, the Business Process Layer in the SOA RA plays a central coordinating role in connecting business-level requirements and IT-level solution components through collaboration with the Integration Layer, Quality of Service Layer, as well as the Information Layer, the Services Layer, and the Service Component Layer. Addressing those challenging issues are being covered in this Business Process Layer to further differentiate the proposed SOA RA with other conceptual reference models from other vendors.&#xD;&#xA;&#xD;&#xA;== Typical Flow&#xD;&#xA;&#xD;&#xA;A typical calling sequence is to invoke a composite service in this layer, which implements a business process. This layer will then be responsible for orchestrating or choreographing the set of required underlying atomic or composite services that are combined to constitute the business process. It will typically maintain state for the flow, provide or collaborate with the Quality of Service Layer for monitoring the process flow, applying policies by working with the Governance Layer. Note that the invocation of the services may occur directly, or preferably, through the Integration Layer, thus enabling a separation of concerns between requester and provider to be managed by the capabilities and Architecture Building Blocks (ABBs) of the Integration Layer. For example, a single or federated set of Enterprise Service Bus(es) (ESBs) may be used to realize the invocation.&#xD;&#xA;&#xD;&#xA;This layer will rely on the infrastructure provided by the Operational Systems Layer, in which, for example, the BPEL engine implementation will physically reside.&#xD;&#xA;&#xD;&#xA;== Capabilities &#xD;&#xA;The _Business Process Layer_ supports and manages business processes and enables the SOA to choreograph or orchestrate services to realize business processes. Business Process Management (BPM) is to be found to start in this layer. There are multiple categories of capabilities that the Business Process Layer needs to support. ">
  <properties
      key="drill down"
      value="eee9ee34-da2f-4ccb-aa1c-1276c15e0123"/>
  <properties
      key="difi:namespace"
      value="togsoara"/>
  <properties
      key="dct:type"
      value="archi:grouping"/>
  <properties
      key="label"
      value="${name}"/>
</archimate:Grouping>
